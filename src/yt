import subprocess
import sys
from pathlib import Path
from urllib.parse import urlparse


def get_valid_numbering():
    numbering = input("Do you want numbering for the playlist? (y/N): ").lower() or "n"
    while True:
        if numbering in ["y", "n"]:
            return numbering
        print("Error: Invalid option. Try again.")


def get_output_template(url, download_dir):
    if "playlist" in url:
        numbering = get_valid_numbering()
        if numbering == "y":
            outtmpl = (
                f"{download_dir}/%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s"
            )
        else:
            outtmpl = f"{download_dir}/%(playlist)s/%(title)s.%(ext)s"
    else:
        outtmpl = f"{download_dir}/%(title)s.%(ext)s"

    return outtmpl


def get_download_dir():
    home_dir = Path.home()

    # Handle Termux-specific path
    if str(home_dir) == "/data/data/com.termux/files/home":
        download_dir = Path("/storage/emulated/0/Download/yt")

    # Handle Unix-like systems and root home directory
    elif home_dir.parts[1] in ("home", "root"):
        download_dir = home_dir / "Downloads" / "yt"

    else:
        raise OSError(
            "Unsupported platform. This only works in Android (with Termux) or Unix-like systems"
        )

    # Ensure the directory exists
    download_dir.mkdir(parents=True, exist_ok=True)
    return download_dir


def get_valid_fps():
    multiple_fps = ["30", "60"]
    try:
        while True:
            fps = input(f"Select an FPS from {multiple_fps} (default: 30): ") or "30"
            if fps in multiple_fps:
                return int(fps)
            print("Error: Invalid FPS. Try again.")
    except KeyboardInterrupt:
        print("\nOperation canceled by user.")
        sys.exit(1)


def get_valid_resolution():
    resolutions = ["144", "240", "360", "480", "720", "1080", "1440", "2160"]
    try:
        while True:
            resolution = (
                input(f"Select a resolution from {resolutions} (default: 360): ")
                or "360"
            )
            if resolution in resolutions:
                return int(resolution)
            print("Error: Invalid resolution. Try again.")
    except KeyboardInterrupt:
        print("\nOperation canceled by user.")
        sys.exit(1)


def is_youtube_link(url):
    parsed_url = urlparse(url)
    return parsed_url.netloc in ["www.youtube.com", "youtube.com", "youtu.be"]


def get_valid_url():
    try:
        while True:
            url = input("Enter a video or playlist URL: ").strip()
            if is_youtube_link(url):
                return url
            print("Error: Invalid URL. Try again.")
    except KeyboardInterrupt:
        print("\nOperation canceled by user.")
        sys.exit(1)


def main():
    try:
        # Get and validate user inputs
        url = get_valid_url()
        resolution = get_valid_resolution()
        fps = get_valid_fps()

        download_dir = get_download_dir()
        outtmpl = get_output_template(url, download_dir)
        format_string = (
            f"bestvideo[ext=mp4][protocol=https][height>={resolution}][fps>={fps}]+bestaudio[ext=m4a]/"
            f"bestvideo[ext=mp4][protocol=https][height>={resolution}][fps<={fps}]+bestaudio[ext=m4a]/"
            f"bestvideo[ext=mp4][protocol=https][height<={resolution}][fps>={fps}]+bestaudio[ext=m4a]/"
            f"bestvideo[ext=mp4][protocol=https][height<={resolution}][fps<={fps}]+bestaudio[ext=m4a]/"
            f"bestvideo[ext=mp4][protocolo=https]+bestaudio[ext=m4a]/"
            f"bestvideo[ext=mp4]+bestaudio[ext=m4a]/"
            f"bestvideo+bestaudio"
        )
        command = [
            "yt-dlp",
            "--output",
            outtmpl,
            "--download-archive",
            str(download_dir / "archive.txt"),
            "--format",
            format_string,
            "--embed-thumbnail",
        ]
        print(command)
        subprocess.run(command, check=True)

    except KeyboardInterrupt:
        print("\nOperation cancelled by user.")
    except Exception as e:
        print(f"\nAn error occurred: {e}")


if __name__ == "__main__":
    main()
    # This is an option from previous command. Don't know whether it's useful or not
    # "merge_output_format": "mp4"
